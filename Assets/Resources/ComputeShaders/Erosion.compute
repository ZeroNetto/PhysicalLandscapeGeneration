#pragma kernel CSMain

RWStructuredBuffer<float> map;
StructuredBuffer<int> randomIndices;
StructuredBuffer<int> brushIndices;
StructuredBuffer<float> brushWeights;

int mapSize;
int brushLength;
int borderSize;

int maxLifetime;
float inertia;
float sedimentCapacityFactor;
float minSedimentCapacity;
float depositSpeed;
float erodeSpeed;

float evaporateSpeed;
float gravity;
float startSpeed;
float startWater;

float3 CalculateHeightAndGradient (float posX, float posY) {
    int coordX = (int) posX;
    int coordY = (int) posY;

    float x = posX - coordX;
    float y = posY - coordY;

    int nodeIndexNW = coordY * mapSize + coordX;
    float heightNW = map[nodeIndexNW];
    float heightNE = map[nodeIndexNW + 1];
    float heightSW = map[nodeIndexNW + mapSize];
    float heightSE = map[nodeIndexNW + mapSize + 1];

    float gradientX = (heightNE - heightNW) * (1 - y) + (heightSE - heightSW) * y;
    float gradientY = (heightSW - heightNW) * (1 - x) + (heightSE - heightNE) * x;

    float height = heightNW * (1 - x) * (1 - y) + heightNE * x * (1 - y) + heightSW * (1 - x) * y + heightSE * x * y;

    return float3(gradientX, gradientY, height);
}

float Erode(float sedimentCapacity, float sediment, float deltaHeight, int dropletIndex){
    float amountToErode = min ((sedimentCapacity - sediment) * erodeSpeed, -deltaHeight);
    
    for (int i = 0; i < brushLength; i++) {
        int erodeIndex = dropletIndex + brushIndices[i];

        float weightedErodeAmount = amountToErode * brushWeights[i];
        float deltaSediment = (map[erodeIndex] < weightedErodeAmount) ? map[erodeIndex] : weightedErodeAmount;
        map[erodeIndex] -= deltaSediment;
        sediment += deltaSediment;
    }
    
    return sediment;
}

float Deposit(float sedimentCapacity, float sediment, float deltaHeight, int dropletIndex, float cellOffsetX, float cellOffsetY){
    float depositAmount = (deltaHeight > 0) ? min(deltaHeight, sediment) : (sediment - sedimentCapacity) * depositSpeed;
    sediment -= depositAmount;

    map[dropletIndex] += depositAmount * (1 - cellOffsetX) * (1 - cellOffsetY);
    map[dropletIndex + 1] += depositAmount * cellOffsetX * (1 - cellOffsetY);
    map[dropletIndex + mapSize] += depositAmount * (1 - cellOffsetX) * cellOffsetY;
    map[dropletIndex + mapSize + 1] += depositAmount * cellOffsetX * cellOffsetY;
    
    return sediment;
}

bool IsStopped(float dirX, float dirY){
    return dirX == 0 && dirY == 0;
}

bool IsOutMap(float posX, float posY){
    return posX < borderSize || posX > mapSize - borderSize || posY < borderSize || posY > mapSize - borderSize;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = randomIndices[id.x];
    float posX = float(index)%mapSize;
    float posY = float(index)/mapSize;
    float dirX = 0;
    float dirY = 0;
    float speed = startSpeed;
    float water = startWater;
    float sediment = 0;

    for (int lifetime = 0; lifetime < maxLifetime; lifetime ++) {
        int nodeX = (int) posX;
        int nodeY = (int) posY;
        int dropletIndex = nodeY * mapSize + nodeX;
        // Calculate droplet's offset inside the cell (0,0) = at NW node, (1,1) = at SE node
        float cellOffsetX = posX - nodeX;
        float cellOffsetY = posY - nodeY;

        float3 heightAndGradient = CalculateHeightAndGradient (posX, posY);

        dirX = (dirX * inertia - heightAndGradient.x * (1 - inertia));
        dirY = (dirY * inertia - heightAndGradient.y * (1 - inertia));
        
        float len = max(0.01,sqrt(dirX * dirX + dirY * dirY));
        dirX /= len;
        dirY /= len;
        posX += dirX;
        posY += dirY;

        if (IsStopped(dirX, dirY) || IsOutMap(posX, posY)) {
            break;
        }

        float newHeight = CalculateHeightAndGradient (posX, posY).z;
        float deltaHeight = newHeight - heightAndGradient.z;

        float sedimentCapacity = max(-deltaHeight * speed * water * sedimentCapacityFactor, minSedimentCapacity);
        
        if (sediment > sedimentCapacity || deltaHeight > 0)
            sediment = Deposit(sedimentCapacity, sediment, deltaHeight, dropletIndex, cellOffsetX, cellOffsetY);
        else
            sediment = Erode(sedimentCapacity, sediment, deltaHeight, dropletIndex);

        speed = sqrt (max(0,speed * speed + deltaHeight * gravity));
        water *= (1 - evaporateSpeed);
    }
}
